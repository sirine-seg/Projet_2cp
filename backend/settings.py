"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
from urllib.parse import urlparse
from dotenv import load_dotenv
import os
from pathlib import Path
from datetime import timedelta
import dj_database_url

# Load environment variables
load_dotenv()

BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get(
    'SECRET_KEY', 'o51#8oksqfs(*zbawv0pi=k-9)#0c_3#+_sb*258x-2!6rb_wi')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True').lower() == 'true'

# Allowed hosts
ALLOWED_HOSTS = ['esi-track-deployement.onrender.com',
                 'localhost', '127.0.0.1']

# Database
DATABASE_URL = os.environ.get(
    'DATABASE_URL', 'postgresql://neondb_owner:npg_rPBw1YjhQ2ku@ep-autumn-term-a4vo0tyn-pooler.us-east-1.aws.neon.tech/neondb?sslmode=require')

DATABASES = {
    'default': dj_database_url.parse(
        DATABASE_URL,
        conn_max_age=600,
        ssl_require=True
    )
}

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django_filters',
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'authentification',
    'accounts_management',
    'equipements_management',
    'interventions_management',
    'notifications_management',
    'phonenumber_field',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    "corsheaders",
    'dj_rest_auth',
    'dj_rest_auth.registration',
    'drf_yasg',
    'stats'
]

SPAGHETTI_SAUCE = {
    'apps': ['intervention_management', 'equipements_management', 'accounts_management'],
    'show_fields': False,
    'exclude': {'auth': ['user']}
}


MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Added for static files
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'backend.urls'


# jwt settings
REST_USE_JWT = True  # enable the use of JWT
# SIMPLE_JWT = {
# "ACCESS_TOKEN_LIFETIME": timedelta(days=5),
# "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
# "ROTATE_REFRESH_TOKENS": False,
# "BLACKLIST_AFTER_ROTATION": False,
# "UPDATE_LAST_LOGIN": False,
# 'AUTH_COOKIE': 'access_token',  # Cookie name for the access token
# 'AUTH_COOKIE_REFRESH': 'refresh_token',  # Cookie name for the refresh token
# 'AUTH_COOKIE_SECURE': False,  # Set to True if using HTTPS
# 'AUTH_COOKIE_HTTP_ONLY': True,  # Make the cookie HTTP only
# 'AUTH_COOKIE_PATH': '/',  # Root path for the cookie
# 'AUTH_COOKIE_SAMESITE': 'Lax',  # Adjust according to your needs

# }

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=120),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    # Use 'Bearer' in the Authorization header
    "AUTH_HEADER_TYPES": ("Bearer",),
}


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'accounts_management.User'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'dj_rest_auth.jwt_auth.JWTCookieAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'accounts_management.permissions.IsNotBlockedUser',
        # 'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend']
}


# cors settings
ROOT_URLCONF = 'backend.urls'
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
    "http://localhost:5174",  # frontend dev server
    # Add your frontend domain when deployed
    "https://esi-track-front-deployement-2.vercel.app",
]
CORS_ALLOW_CREDENTIALS = True

REST_AUTH = {
    'USE_JWT': True,
    'JWT_AUTH_COOKIE': 'my-app-auth',
    'JWT_AUTH_REFRESH_COOKIE': 'my-refresh-token',
    'JWT_AUTH_SAMESITE ': 'None',
    'JWT_AUTH_SECURE': False,
    'JWT_AUTH_HTTPONLY': True
}

# SOCIALACCOUNT_PROVIDERS = {
#    'google': {
#        'APP': {
#            'client_id': '746021296567-ps7a99uvjgduiic1536edgo26tajha98.apps.googleusercontent.com',
#            'secret': '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',
#        },
#        'SCOPE': [
#            'profile',
#            'email',
#        ],
#        'AUTH_PARAMS': {
#            'access_type': 'online',
#        }
#    }
# }

SITE_ID = 1

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

# social account settings
SOCIALACCOUNT_ADAPTER = 'authentification.adapters.ESIDZSocialAccountAdapter'
# LOGIN_REDIRECT_URL = 'login_success'
# LOGIN_URL = 'account_login'
SOCIALACCOUNT_AUTO_SIGNUP = True
ACCOUNT_EMAIL_VERIFICATION = 'none'
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
SOCIALACCOUNT_EMAIL_AUTHENTICATION_AUTO_CONNECT = True
SOCIALACCOUNT_LOGIN_ON_GET = True
SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'
SOCIALACCOUNT_STORE_TOKENS = False

MEDIA_URL = '/equip_imges/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'equip_imges')
# used to enable atomic requests   used in `account_management.views`
ATOMIC_REQUESTS = True

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'  # Replace with your email provider's SMTP server
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'esitrack@esi.dz'  # Replace with your email address
EMAIL_HOST_PASSWORD = 'fhol grax wgpt rrbt '  # Replace with your email password
# Replace with your actual frontend URL
FRONTEND_URL = os.environ.get('FRONTEND_URL', "http://localhost:3000/")
